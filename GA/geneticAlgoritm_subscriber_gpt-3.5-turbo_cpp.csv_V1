generation,prompt,code,fitness
0,generate a ROS1 noetic subscriber in cpp,"#include <ros/ros.h>
#include <std_msgs/String.h>

// Callback function to process incoming messages
void messageCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char** argv) {
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle nh;

    // Create a subscriber for the ""chatter"" topic
    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, messageCallback);

    // Spin to wait for incoming messages
    ros::spin();

    return 0;
}",1.3242413378668438
0,code a ROS sub in cpp with the topic chatter,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, ""listener"");
  ros::NodeHandle n;

  ros::Subscriber sub = n.subscribe(""chatter"", 1000, chatterCallback);

  ros::spin();

  return 0;
}",1.1989322456682772
2,construct a ROS1 sub in cpp with the parameter chatter,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, ""listener"");
  ros::NodeHandle nh;

  ros::Subscriber sub = nh.subscribe(""chatter"", 1000, chatterCallback);

  ros::spin();

  return 0;
}",1.2346119196171494
3,build a ROS1 noetic subscriber in cpp,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

// Callback function to process incoming messages
void messageCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char **argv) {
    // Initialize the ROS node
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle nh;

    // Subscribe to the topic ""chatter"" with a queue size of 10 and specify the callback function
    ros::Subscriber sub = nh.subscribe(""chatter"", 10, messageCallback);

    ROS_INFO(""Subscriber node is running"");

    // Spin indefinitely to handle incoming messages
    ros::spin();

    return 0;
}",1.3363194929479403
