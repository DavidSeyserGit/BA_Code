generation,prompt,code,fitness
0,make a ROS1 subscriber in cpp,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void callback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv) {
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle nh;

    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, callback);

    ros::spin();

    return 0;
}",13.960502304220455
0,code ROS sub in cpp,"#include ""ros/ros.h""
#include ""sensor_msgs/Imu.h""

void imuCallback(const sensor_msgs::Imu::ConstPtr& msg)
{
    // Callback function to handle incoming IMU messages
    ROS_INFO(""Received IMU Data: Linear Acceleration x=%f, y=%f, z=%f"", msg->linear_acceleration.x, msg->linear_acceleration.y, msg->linear_acceleration.z);
    ROS_INFO(""Angular Velocity x=%f, y=%f, z=%f"", msg->angular_velocity.x, msg->angular_velocity.y, msg->angular_velocity.z);
}

int main(int argc, char **argv)
{
    // Initialize the ROS node
    ros::init(argc, argv, ""imu_subscriber_node"");

    // Create a NodeHandle
    ros::NodeHandle nh;

    // Define the subscriber with a callback function
    ros::Subscriber sub = nh.subscribe<sensor_msgs::Imu>(""sensor_data"", 1000, imuCallback);

    // Spin to receive messages
    ros::spin();

    return 0;
}",4.688767682688067
0,create a subscriber for ROS in c++,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void messageCallback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv)
{
    // Initialize the ROS node
    ros::init(argc, argv, ""subscriber_node"");

    // Create a node handle
    ros::NodeHandle nh;

    // Create a subscriber to receive messages on the ""chatter"" topic
    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, messageCallback);

    // Spin to listen for messages
    ros::spin();

    return 0;
}",9.98371133985487
0,generate a c++ sub node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void subCallback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char **argv)
{
    // Initialize the ROS node
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle nh;

    // Create a subscriber that listens to the ""chatter"" topic
    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, subCallback);

    // Spin to receive messages
    ros::spin();

    return 0;
}",10.610287846302239
1,make a c++ sub node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void messageCallback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle node;

    ros::Subscriber sub = node.subscribe(""chatter"", 10, messageCallback);

    ros::spin();

    return 0;
}",12.646421686722453
3,make a ROS1 sub node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(""I heard: %s"", data.data)

def listener():
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber(""chatter"", String, callback)
    rospy.spin()

if __name__ == '__main__':
    listener()",0
4,make a ROS1 subscriber actuator node,"#include ""ros/ros.h""
#include ""actuator_control/ActuatorControl.h""

// Callback function to process messages from the topic
void actuatorCallback(const actuator_control::ActuatorControl::ConstPtr& msg) {
    // Process the received actuator value
    float actuator_value = msg->actuator_value;

    // Control the actuator based on the received value (This is just an example)
    ROS_INFO(""Received Actuator Value: %f"", actuator_value);
    // Add your actuator control logic here
}

int main(int argc, char **argv) {
    // Initialize the ROS node
    ros::init(argc, argv, ""actuator_subscriber_node"");
    ros::NodeHandle nh;

    // Subscribe to the 'actuator_topic' topic with a queue size of 10
    ros::Subscriber sub = nh.subscribe(""actuator_topic"", 10, actuatorCallback);

    // Spin to listen for messages
    ros::spin();

    return 0;
}",0
5,make a ROS1 subscriber node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def chatter_callback(msg):
    rospy.loginfo(""I heard: %s"", msg.data)

def subscriber_node():
    rospy.init_node('subscriber_node', anonymous=True)
    rospy.Subscriber(""/chatter"", String, chatter_callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        subscriber_node()
    except rospy.ROSInterruptException:
        pass",0
11,make a c++ node,"#include <ros/ros.h>
#include <std_msgs/Float32.h>

class MyNode {
public:
    MyNode() {
        // Initialize node handle
        nh = ros::NodeHandle(""~"");

        // Subscribe to input topic
        sub = nh.subscribe(""input_topic"", 10, &MyNode::inputCallback, this);

        // Advertise output topic
        pub = nh.advertise<std_msgs::Float32>(""output_topic"", 10);
    }

    void inputCallback(const std_msgs::Float32::ConstPtr& input_msg) {
        // Perform computation on input data
        float result = doComputation(input_msg->data);

        // Publish the result
        std_msgs::Float32 output_msg;
        output_msg.data = result;
        pub.publish(output_msg);
    }

private:
    ros::NodeHandle nh;
    ros::Subscriber sub;
    ros::Publisher pub;

    // Perform computation on input data
    float doComputation(float input) {
        // Add your computation logic here
        return input * 2; // Sample computation (multiply input by 2)
    }
};

int main(int argc, char** argv) {
    ros::init(argc, argv, ""my_node"");
    MyNode node;

    ros::spin();

    return 0;
}",4.05309528447289
13,make a launch ROS1 subscriber node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(""Received: %s"", data.data)

def subscriber_node():
    rospy.init_node('subscriber_node', anonymous=True)
    rospy.Subscriber(""chatter_topic"", String, callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        subscriber_node()
    except rospy.ROSInterruptException:
        pass",0
18,make c++ sub node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

// Callback function to receive and print messages
void messageCallback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char **argv)
{
    // Initialize the ROS node
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle nh;

    // Create a subscriber object
    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, messageCallback);

    // Spin and process callbacks
    ros::spin();

    return 0;
}",10.49741999775116
21,make a ROS1 robot subscriber node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def status_callback(msg):
    rospy.loginfo(""Received status: %s"", msg.data)

def subscriber_node():
    rospy.init_node('robot_subscriber', anonymous=True)
    rospy.Subscriber('/robot_status', String, status_callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        subscriber_node()
    except rospy.ROSInterruptException:
        pass",0
24,process make a c++ sub node,"#include ""ros/ros.h""
#include ""std_msgs/Int32.h""

void messageCallback(const std_msgs::Int32::ConstPtr& msg) {
    // Process the received message
    int processed_data = msg->data * 2;

    // Publish the processed data
    ros::NodeHandle nh;
    ros::Publisher processed_data_pub = nh.advertise<std_msgs::Int32>(""processed_data_topic"", 10);
    
    std_msgs::Int32 processed_msg;
    processed_msg.data = processed_data;
    processed_data_pub.publish(processed_msg);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, ""my_sub_node"");
    ros::NodeHandle nh;

    // Subscribe to the topic
    ros::Subscriber sub = nh.subscribe(""original_data_topic"", 10, messageCallback);

    ros::spin();

    return 0;
}",4.777406277197472
31,make a ROS1 node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

class SimpleNode:
    def __init__(self):
        rospy.init_node('simple_node', anonymous=True)
        self.input_sub = rospy.Subscriber('input_topic', String, self.input_callback)
        self.output_pub = rospy.Publisher('output_topic', String, queue_size=10)

    def input_callback(self, msg):
        rospy.loginfo('Received: %s', msg.data)
        self.publish_message(msg.data)

    def publish_message(self, data):
        self.output_pub.publish(String(data))

if __name__ == '__main__':
    try:
        node = SimpleNode()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass",0
35,make a subscriber for ROS in c++,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

// Subscriber callback function
void chatterCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv) {
    // Initialize the ROS node
    ros::init(argc, argv, ""simple_subscriber"");
    
    // Create a node handle
    ros::NodeHandle nh;
    
    // Create a subscriber to the ""/chatter"" topic with a queue size of 1000
    ros::Subscriber sub = nh.subscribe(""/chatter"", 1000, chatterCallback);

    // Spin to keep the node running and callback triggered
    ros::spin();

    return 0;
}",10.264828456223638
50,planning make a c++ sub node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

// Callback function to process messages received on chatter topic
void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv)
{
    // Initialize the ROS node
    ros::init(argc, argv, ""simple_subscriber_node"");

    // Create a NodeHandle object
    ros::NodeHandle n;

    // Subscribe to the chatter topic with a queue size of 10 and specify the callback function
    ros::Subscriber sub = n.subscribe(""chatter"", 10, chatterCallback);

    // Spin to process callbacks
    ros::spin();

    return 0;
}",10.19679513637845
62,make a sub node,"#!/usr/bin/env python

import rospy

def sub_node():
    rospy.init_node('sub_node', anonymous=True)
    
    # Add your code logic here

    rospy.spin()

if __name__ == '__main__':
    try:
        sub_node()
    except rospy.ROSInterruptException:
        pass",0
68,make a c++ task sub node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void taskCallback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO(""Received task: %s"", msg->data.c_str());
  // Add your task processing logic here
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, ""task_subscriber_node"");
  ros::NodeHandle nh;

  ros::Subscriber sub = nh.subscribe(""task_topic"", 10, taskCallback);

  ROS_INFO(""Task subscriber node started"");

  ros::spin();

  return 0;
}",10.896535716937818
69,make a ROS1 c++ sub node,"#include <ros/ros.h>
#include <std_msgs/String.h>

void sensorCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""Received sensor data: %s"", msg->data.c_str());
}

int main(int argc, char **argv) {
    // Initialize the ROS node
    ros::init(argc, argv, ""subscriber_node"");

    // Create a node handle
    ros::NodeHandle nh;

    // Subscribe to the ""/sensor_data"" topic
    ros::Subscriber sub = nh.subscribe(""/sensor_data"", 10, sensorCallback);

    // Spin and wait for messages
    ros::spin();

    return 0;
}",9.946870269693305
70,make a ROS1 for ROS in c++,"#include ""ros/ros.h""
#include ""std_msgs/String.h""
#include <sstream>

// Callback function to process received messages
void messageCallback(const std_msgs::String::ConstPtr& msg)
{
    // Convert received message to uppercase
    std::string upperCaseMsg = msg->data;
    std::transform(upperCaseMsg.begin(), upperCaseMsg.end(), upperCaseMsg.begin(), ::toupper);

    // Publish the processed message
    ros::NodeHandle n;
    ros::Publisher pub = n.advertise<std_msgs::String>(""/output_topic"", 1000);
    std_msgs::String outputMsg;
    outputMsg.data = upperCaseMsg;
    pub.publish(outputMsg);
    ROS_INFO(""Published message: %s"", outputMsg.data.c_str());
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, ""uppercase_converter_node"");
    ros::NodeHandle nh;

    // Subscribe to the input topic
    ros::Subscriber sub = nh.subscribe(""/input_topic"", 1000, messageCallback);

    ros::spin();

    return 0;
}",9.844529409010743
71,make a ROS1 subscriber in node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(""I heard: %s"", data.data)

def listener():
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber(""chatter"", String, callback)
    rospy.spin()

if __name__ == '__main__':
    listener()",0
87,make a sub in cpp,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void messageCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""I heard: [%s]"", msg->data.c_str());
}

int main(int argc, char **argv) {
    ros::init(argc, argv, ""subscriber_node"");
    ros::NodeHandle nh;

    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, messageCallback);

    ros::spin(); // Keeps the node running until Ctrl-C is pressed

    return 0;
}",11.627835266721414
96,make a execution ROS1 sub node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def chatter_callback(data):
    rospy.loginfo(rospy.get_caller_id() + ""I heard %s"", data.data)
    # Add your desired logic here based on the received message

def execution_subscriber():
    rospy.init_node('execution_subscriber', anonymous=True)
    rospy.Subscriber(""chatter"", String, chatter_callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        execution_subscriber()
    except rospy.ROSInterruptException:
        pass",0
103,make a queue c++ sub node,"#include <ros/ros.h>
#include <std_msgs/Int32.h>
#include <queue>
#include ""queue_node/Enqueue.h"" // Custom service message for enqueue
#include ""queue_node/Dequeue.h"" // Custom service message for dequeue

std::queue<int> q;

bool enqueueCallback(queue_node::Enqueue::Request &req, queue_node::Enqueue::Response &res) {
    q.push(req.data);
    res.success = true;
    return true;
}

bool dequeueCallback(queue_node::Dequeue::Request &req, queue_node::Dequeue::Response &res) {
    if (!q.empty()) {
        res.data = q.front();
        q.pop();
        res.success = true;
    } else {
        res.success = false;
    }
    return true;
}

void topicCallback(const std_msgs::Int32::ConstPtr& msg) {
    ROS_INFO(""Received: [%d]"", msg->data);
    q.push(msg->data);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, ""queue_node"");
    ros::NodeHandle nh;

    ros::Subscriber sub = nh.subscribe(""input_topic"", 1000, topicCallback);
    ros::ServiceServer enqueueService = nh.advertiseService(""enqueue"", enqueueCallback);
    ros::ServiceServer dequeueService = nh.advertiseService(""dequeue"", dequeueCallback);

    ros::spin();

    return 0;
}",0
104,make a ROS1 subscriber sub node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(""Received message: %s"", data.data)

def sub_node():
    rospy.init_node('sub_node', anonymous=True)
    rospy.Subscriber(""/chatter"", String, callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        sub_node()
    except rospy.ROSInterruptException:
        pass",0
113,make c++ sub execution node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

class ExecutionNode
{
public:
    ExecutionNode()
    {
        sub = n.subscribe(""input_topic"", 1000, &ExecutionNode::callback, this);
        pub = n.advertise<std_msgs::String>(""output_topic"", 1000);
    }

    void callback(const std_msgs::String::ConstPtr& msg)
    {
        // Perform execution logic here
        std_msgs::String output_msg;
        output_msg.data = ""Processed: "" + msg->data;

        // Publish the processed message
        pub.publish(output_msg);
    }

private:
    ros::NodeHandle n;
    ros::Subscriber sub;
    ros::Publisher pub;
};

int main(int argc, char **argv)
{
    ros::init(argc, argv, ""execution_node"");
    ExecutionNode en;

    ros::spin();

    return 0;
}",4.704841033857885
124,make a c++ execution sub node,"#include <ros/ros.h>
#include <std_msgs/String.h>

class ExecutionNode {
public:
    ExecutionNode() {
        // Initialize ROS node handle
        nh = ros::NodeHandle();

        // Subscribe to the input topic
        sub = nh.subscribe(""input_topic"", 10, &ExecutionNode::inputCallback, this);

        // Advertise the output topic
        pub = nh.advertise<std_msgs::String>(""output_topic"", 10);
    }

    // Callback function for the input topic
    void inputCallback(const std_msgs::String::ConstPtr& msg) {
        // Process the received message
        std_msgs::String output_msg;
        output_msg.data = ""Processed: "" + msg->data;

        // Publish the processed message
        pub.publish(output_msg);
    }

private:
    ros::NodeHandle nh;
    ros::Subscriber sub;
    ros::Publisher pub;
};

int main(int argc, char** argv) {
    // Initialize the ROS node
    ros::init(argc, argv, ""execution_node"");

    // Create an object of ExecutionNode class
    ExecutionNode exec_node;

    // Spin the node to process callbacks
    ros::spin();

    return 0;
}",4.055863879937175
126,a c++ sub node,"#include <ros/ros.h>
#include <your_custom_msg_package/CustomMsg.h> // Include the custom message header

void customMsgCallback(const your_custom_msg_package::CustomMsg::ConstPtr& msg)
{
    // Callback function to handle incoming custom messages
    ROS_INFO(""Received custom message: %s"", msg->data.c_str());
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, ""subscriber_node""); // Initialize the ROS node
    ros::NodeHandle nh; // Create a NodeHandle

    // Subscribe to the custom topic
    ros::Subscriber sub = nh.subscribe(""/custom_topic"", 10, customMsgCallback);

    // Spin to receive and process messages
    ros::spin();

    return 0;
}",0
137,make a ROS1 in cpp,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void messageCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char** argv) {
    ros::init(argc, argv, ""listener_node"");
    ros::NodeHandle node_handle;

    ros::Subscriber sub = node_handle.subscribe(""chatter"", 1000, messageCallback);

    ros::spin();

    return 0;
}",12.261935149703595
150,a ROS1 subscriber node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(""Received: %s"", data.data)

def listener():
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber('chatter', String, callback)
    rospy.spin()

if __name__ == '__main__':
    listener()",0
151,make a ROS1 execution robot subscriber node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(""Received command: %s"", data.data)
    # Add execution logic here

def robot_subscriber():
    rospy.init_node('robot_subscriber', anonymous=True)
    rospy.Subscriber(""/robot_execution"", String, callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        robot_subscriber()
    except rospy.ROSInterruptException:
        pass",0
160,make a ROS1 subscriber ROS in c++,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void messageCallback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, ""subscriber_node"");
  ros::NodeHandle nh;

  ros::Subscriber sub = nh.subscribe(""topic_name"", 10, messageCallback);

  ros::spin(); // Enter a loop, pumping callbacks
  return 0;
}",11.64198530505091
167,make a ROS1 subscriber cpp,"#include <ros/ros.h>
#include <std_msgs/String.h>

void messageCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char** argv) {
    ros::init(argc, argv, ""example_subscriber_node"");
    ros::NodeHandle nh;

    ros::Subscriber sub = nh.subscribe(""/example_topic"", 10, messageCallback);

    ros::spin();

    return 0;
}",11.815908830708238
173,make a a c++ sub node,"#include ""ros/ros.h""
#include ""std_msgs/String.h""

void messageCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO(""Received message: %s"", msg->data.c_str());
}

int main(int argc, char **argv) {
    // Initialize the ROS node
    ros::init(argc, argv, ""simple_subscriber_node"");
    ros::NodeHandle nh;

    // Create a Subscriber that listens to the ""chatter"" topic
    ros::Subscriber sub = nh.subscribe(""chatter"", 1000, messageCallback);

    // Spin to handle incoming messages
    ros::spin();

    return 0;
}",7.523555790961062
184,make a sensor ROS1 subscriber node,"#!/usr/bin/env python

import rospy
from std_msgs.msg import Float32

def sensor_callback(data):
    rospy.loginfo(""Received sensor data: %f"", data.data)

def sensor_subscriber():
    rospy.init_node('sensor_subscriber', anonymous=True)
    rospy.Subscriber('sensor_topic', Float32, sensor_callback)
    rospy.spin()

if __name__ == '__main__':
    try:
        sensor_subscriber()
    except rospy.ROSInterruptException:
        pass",0
