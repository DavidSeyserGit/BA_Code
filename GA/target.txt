#include "ros/ros.h"
#include "nav_msgs/Odometry.h"
#include <tf/transform_broadcaster.h>

double phi = 10;
double L = 2;
double b = 0.1;
double r_r = 0.1; 

double wc = (phi*r_r) / (L - (b/2));

double x = 0;
double y = -2;
double theta = 0;

double dt = 0.1;

int main(int argc, char **argv)
{
    ros::init(argc, argv, "controller");
    ros::NodeHandle nh;
    ros::Publisher icr_pub = nh.advertise<nav_msgs::Odometry>("/icr", 100);
    tf::TransformBroadcaster odom_broadcaster;

    ros::Time current_time, last_time;
    ros::Rate rate(10);


    while(ros::ok())
    {
        current_time = ros::Time::now();
        theta += wc * dt;
        x += -L * sin(theta) + L * sin(theta + wc*dt);
        y += L * cos(theta) - L * cos(theta + wc*dt);
        double velX = wc * L * cos(theta);
        double velY = wc * L *sin(theta);

        nav_msgs::Odometry odom;
        odom.header.stamp = current_time;
        odom.header.frame_id = "odom";
        odom.child_frame_id = "base_link";

        odom.pose.pose.position.x = x;
        odom.pose.pose.position.y = y;
        odom.pose.pose.position.z = 0;
        odom.pose.pose.orientation = tf::createQuaternionMsgFromYaw(theta);
        odom.twist.twist.linear.x = velX;
        odom.twist.twist.linear.y = velY;
        odom.twist.twist.angular.z = wc;

        icr_pub.publish(odom);

        geometry_msgs::TransformStamped odom_trans;
        odom_trans.header.stamp = current_time;
        odom_trans.header.frame_id = "odom";
        odom_trans.child_frame_id = "base_link";
        odom_trans.transform.translation.x = x;
        odom_trans.transform.translation.y = y;
        odom_trans.transform.translation.z = 0;
        odom_trans.transform.rotation = tf::createQuaternionMsgFromYaw(theta);
        odom_broadcaster.sendTransform(odom_trans);

        last_time = current_time;
        rate.sleep();

    }
}